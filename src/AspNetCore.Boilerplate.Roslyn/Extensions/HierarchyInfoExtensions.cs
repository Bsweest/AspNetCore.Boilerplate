using System.Collections.Immutable;
using AspNetCore.Boilerplate.Roslyn.Constants;
using AspNetCore.Boilerplate.Roslyn.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static AspNetCore.Boilerplate.Roslyn.Constants.GeneratorConstant;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace AspNetCore.Boilerplate.Roslyn.Extensions;

internal static class HierarchyInfoExtensions
{
    public static CompilationUnitSyntax GetCompilationUnitForDependency(
        this HierarchyInfo hierarchyInfo,
        ImmutableArray<ExpressionStatementSyntax> registerExpressions
    )
    {
        TypeDeclarationSyntax typeDeclarationSyntax = (
            (ClassDeclarationSyntax)
                hierarchyInfo
                    .Hierarchy[0]
                    .GetSyntax()
                    .AddModifiers(Token(SyntaxKind.PartialKeyword))
                    .AddBaseListTypes(
                        SimpleBaseType(
                            IdentifierName(GeneratorConstant.Namespace + ".IAutoRegister")
                        )
                    )
        ).AddMembers(
            MethodDeclaration(
                    PredefinedType(Token(SyntaxKind.VoidKeyword)),
                    Identifier("AddDependencies")
                )
                .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
                .WithParameterList(
                    ParameterList(
                        SingletonSeparatedList(
                            Parameter(Identifier("services"))
                                .WithType(IdentifierName("IServiceCollection"))
                        )
                    )
                )
                .AddBodyStatements(registerExpressions.ToArray<StatementSyntax>())
        );

        var hierarchySpan = hierarchyInfo.Hierarchy.AsSpan();
        foreach (var parentType in hierarchySpan.Slice(1, hierarchySpan.Length - 1))
            typeDeclarationSyntax = parentType
                .GetSyntax()
                .AddModifiers(Token(SyntaxKind.PartialKeyword))
                .AddMembers(typeDeclarationSyntax);

        var syntaxTriviaList = TriviaList(
            Comment("// <auto-generated/>"),
            Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))
        );
        var unitSyntax = CompilationUnit()
            .WithUsings(
                SingletonList(
                    UsingDirective(IdentifierName("Microsoft.Extensions.DependencyInjection"))
                )
            );

        if (hierarchyInfo.Namespace is "")
            return unitSyntax
                .AddMembers(typeDeclarationSyntax.WithLeadingTrivia(syntaxTriviaList))
                .NormalizeWhitespace();

        return unitSyntax
            .AddMembers(
                NamespaceDeclaration(IdentifierName(hierarchyInfo.Namespace))
                    .AddMembers(typeDeclarationSyntax)
                    .WithLeadingTrivia(syntaxTriviaList)
            )
            .NormalizeWhitespace();
    }

    public static CompilationUnitSyntax GetCompilationUnitForEndpoint(
        this HierarchyInfo hierarchyInfo,
        LocalDeclarationStatementSyntax mapRouteSyntax,
        ExpressionStatementSyntax? buildRouteSyntax
    )
    {
        var block = Block().AddStatements(mapRouteSyntax);

        if (buildRouteSyntax is not null)
            block = block.AddStatements(buildRouteSyntax);

        block = block.AddStatements(ReturnStatement(IdentifierName("builder")));
        
        TypeDeclarationSyntax typeDeclarationSyntax = (
            (ClassDeclarationSyntax)
                hierarchyInfo
                    .Hierarchy[0]
                    .GetSyntax()
                    .AddModifiers(Token(SyntaxKind.PartialKeyword))
                    .AddBaseListTypes(
                        SimpleBaseType(IdentifierName($"{Global}{ApiNamespace}.IEndpoint"))
                    )
        ).AddMembers(
            MethodDeclaration(
                    IdentifierName($"{Global}Microsoft.AspNetCore.Builder.RouteHandlerBuilder"),
                    Identifier("ConfigureRouteBuilder")
                )
                .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
                .WithParameterList(
                    ParameterList(
                        SingletonSeparatedList(
                            Parameter(Identifier("app"))
                                .WithType(
                                    IdentifierName(
                                        "global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder"
                                    )
                                )
                        )
                    )
                )
                .WithBody(block)
        );

        var hierarchySpan = hierarchyInfo.Hierarchy.AsSpan();
        foreach (var parentType in hierarchySpan.Slice(1, hierarchySpan.Length - 1))
            typeDeclarationSyntax = parentType
                .GetSyntax()
                .AddModifiers(Token(SyntaxKind.PartialKeyword))
                .AddMembers(typeDeclarationSyntax);

        var syntaxTriviaList = TriviaList(
            Comment("// <auto-generated/>"),
            Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))
        );

        if (hierarchyInfo.Namespace is "")
            return CompilationUnit()
                .AddMembers(typeDeclarationSyntax.WithLeadingTrivia(syntaxTriviaList))
                .NormalizeWhitespace();

        return CompilationUnit()
            .AddMembers(
                NamespaceDeclaration(IdentifierName(hierarchyInfo.Namespace))
                    .AddMembers(typeDeclarationSyntax)
                    .WithLeadingTrivia(syntaxTriviaList)
            )
            .NormalizeWhitespace();
    }

    private static readonly SyntaxToken[] PublicStatic =
    {
        Token(SyntaxKind.PublicKeyword),
        Token(SyntaxKind.StaticKeyword),
    };

    private static readonly SyntaxToken[] Public = { Token(SyntaxKind.PublicKeyword) };

    public static CompilationUnitSyntax GetCompilationUnitForController(
        this HierarchyInfo hierarchyInfo,
        bool isStatic,
        ImmutableArray<ExpressionStatementSyntax> mapEndpointExpressions
    )
    {
        TypeDeclarationSyntax typeDeclarationSyntax = (
            (ClassDeclarationSyntax)
                hierarchyInfo
                    .Hierarchy[0]
                    .GetSyntax()
                    .AddModifiers(Token(SyntaxKind.PartialKeyword))
        ).AddMembers(
            MethodDeclaration(
                    PredefinedType(Token(SyntaxKind.VoidKeyword)),
                    Identifier("MapEndpoints")
                )
                .AddModifiers(isStatic ? PublicStatic : Public)
                .WithParameterList(
                    ParameterList(
                        SingletonSeparatedList(
                            Parameter(Identifier("app"))
                                .WithType(IdentifierName("IEndpointRouteBuilder"))
                        )
                    )
                )
                .AddBodyStatements(mapEndpointExpressions.ToArray<StatementSyntax>())
        );

        var hierarchySpan = hierarchyInfo.Hierarchy.AsSpan();
        foreach (var parentType in hierarchySpan.Slice(1, hierarchySpan.Length - 1))
            typeDeclarationSyntax = parentType
                .GetSyntax()
                .AddModifiers(Token(SyntaxKind.PartialKeyword))
                .AddMembers(typeDeclarationSyntax);

        var syntaxTriviaList = TriviaList(
            Comment("// <auto-generated/>"),
            Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))
        );

        var unitSyntax = CompilationUnit()
            .AddUsings(UsingDirective(IdentifierName("Microsoft.AspNetCore.Routing")));

        if (hierarchyInfo.Namespace is "")
            return unitSyntax
                .AddMembers(typeDeclarationSyntax.WithLeadingTrivia(syntaxTriviaList))
                .NormalizeWhitespace();

        return unitSyntax
            .AddMembers(
                NamespaceDeclaration(IdentifierName(hierarchyInfo.Namespace))
                    .AddMembers(typeDeclarationSyntax)
                    .WithLeadingTrivia(syntaxTriviaList)
            )
            .NormalizeWhitespace();
    }
}
